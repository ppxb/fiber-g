// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	deptsFieldNames          = builder.RawFieldNames(&Depts{})
	deptsRows                = strings.Join(deptsFieldNames, ",")
	deptsRowsExpectAutoSet   = strings.Join(stringx.Remove(deptsFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	deptsRowsWithPlaceHolder = strings.Join(stringx.Remove(deptsFieldNames, "`id`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"

	cacheDeptsIdPrefix = "cache:depts:id:"
)

type (
	deptsModel interface {
		Insert(ctx context.Context, data *Depts) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Depts, error)
		Update(ctx context.Context, data *Depts) error
		Delete(ctx context.Context, id string) error
	}

	defaultDeptsModel struct {
		sqlc.CachedConn
		table string
	}

	Depts struct {
		Id         string    `db:"id"`          // 部门ID
		Name       string    `db:"name"`        // 部门名称
		Level      int64     `db:"level"`       // 层级
		ParentId   string    `db:"parent_id"`   // 上级部门ID
		HeaderId   string    `db:"header_id"`   // 部门负责人ID
		Status     int64     `db:"status"`      // 状态：0-正常 1-禁用
		CreateTime time.Time `db:"create_time"` // 创建时间
		UpdateTime time.Time `db:"update_time"` // 更新时间
	}
)

func newDeptsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultDeptsModel {
	return &defaultDeptsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`depts`",
	}
}

func (m *defaultDeptsModel) Delete(ctx context.Context, id string) error {
	deptsIdKey := fmt.Sprintf("%s%v", cacheDeptsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, deptsIdKey)
	return err
}

func (m *defaultDeptsModel) FindOne(ctx context.Context, id string) (*Depts, error) {
	deptsIdKey := fmt.Sprintf("%s%v", cacheDeptsIdPrefix, id)
	var resp Depts
	err := m.QueryRowCtx(ctx, &resp, deptsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deptsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultDeptsModel) Insert(ctx context.Context, data *Depts) (sql.Result, error) {
	deptsIdKey := fmt.Sprintf("%s%v", cacheDeptsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?)", m.table, deptsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Name, data.Level, data.ParentId, data.HeaderId, data.Status)
	}, deptsIdKey)
	return ret, err
}

func (m *defaultDeptsModel) Update(ctx context.Context, data *Depts) error {
	deptsIdKey := fmt.Sprintf("%s%v", cacheDeptsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, deptsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Name, data.Level, data.ParentId, data.HeaderId, data.Status, data.Id)
	}, deptsIdKey)
	return err
}

func (m *defaultDeptsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheDeptsIdPrefix, primary)
}

func (m *defaultDeptsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", deptsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultDeptsModel) tableName() string {
	return m.table
}
