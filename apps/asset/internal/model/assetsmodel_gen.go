// Code generated by goctl. DO NOT EDIT!

package model

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/cache"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	assetsFieldNames          = builder.RawFieldNames(&Assets{})
	assetsRows                = strings.Join(assetsFieldNames, ",")
	assetsRowsExpectAutoSet   = strings.Join(stringx.Remove(assetsFieldNames, "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), ",")
	assetsRowsWithPlaceHolder = strings.Join(stringx.Remove(assetsFieldNames, "`id`", "`created_at`", "`create_time`", "`update_at`", "`updated_at`", "`update_time`", "`create_at`"), "=?,") + "=?"

	cacheAssetsIdPrefix = "cache:assets:id:"
)

type (
	assetsModel interface {
		Insert(ctx context.Context, data *Assets) (sql.Result, error)
		FindOne(ctx context.Context, id string) (*Assets, error)
		Update(ctx context.Context, data *Assets) error
		Delete(ctx context.Context, id string) error
	}

	defaultAssetsModel struct {
		sqlc.CachedConn
		table string
	}

	Assets struct {
		Id             string         `db:"id"`               // 资产ID
		Serial         string         `db:"serial"`           // 编号
		Name           string         `db:"name"`             // 名称
		ProjectId      string         `db:"project_id"`       // 项目ID
		SonProjectId   string         `db:"son_project_id"`   // 子项目ID
		PartProjectId  string         `db:"part_project_id"`  // 分部项目ID
		Type           string         `db:"type"`             // 属性
		SubDistrict    string         `db:"sub_district"`     // 街道
		Brand          string         `db:"brand"`            // 品牌
		Model          string         `db:"model"`            // 型号
		Unit           string         `db:"unit"`             // 单位
		Params         sql.NullString `db:"params"`           // 参数
		Value          float64        `db:"value"`            // 价值
		Address        string         `db:"address"`          // 位置
		Long           string         `db:"long"`             // 经度
		Lat            string         `db:"lat"`              // 纬度
		ImgUrl         string         `db:"img_url"`          // 图片地址
		SystemLoginUrl string         `db:"system_login_url"` // 登录地址
		SystemLoginPwd string         `db:"system_login_pwd"` // 登录密码
		IsDeleted      int64          `db:"is_deleted"`       // 软删除：0-未删除 1-已删除
		CreateTime     time.Time      `db:"create_time"`      // 创建时间
		UpdateTime     time.Time      `db:"update_time"`      // 更新时间
	}
)

func newAssetsModel(conn sqlx.SqlConn, c cache.CacheConf) *defaultAssetsModel {
	return &defaultAssetsModel{
		CachedConn: sqlc.NewConn(conn, c),
		table:      "`assets`",
	}
}

func (m *defaultAssetsModel) Delete(ctx context.Context, id string) error {
	assetsIdKey := fmt.Sprintf("%s%v", cacheAssetsIdPrefix, id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("delete from %s where `id` = ?", m.table)
		return conn.ExecCtx(ctx, query, id)
	}, assetsIdKey)
	return err
}

func (m *defaultAssetsModel) FindOne(ctx context.Context, id string) (*Assets, error) {
	assetsIdKey := fmt.Sprintf("%s%v", cacheAssetsIdPrefix, id)
	var resp Assets
	err := m.QueryRowCtx(ctx, &resp, assetsIdKey, func(ctx context.Context, conn sqlx.SqlConn, v interface{}) error {
		query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", assetsRows, m.table)
		return conn.QueryRowCtx(ctx, v, query, id)
	})
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultAssetsModel) Insert(ctx context.Context, data *Assets) (sql.Result, error) {
	assetsIdKey := fmt.Sprintf("%s%v", cacheAssetsIdPrefix, data.Id)
	ret, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)", m.table, assetsRowsExpectAutoSet)
		return conn.ExecCtx(ctx, query, data.Id, data.Serial, data.Name, data.ProjectId, data.SonProjectId, data.PartProjectId, data.Type, data.SubDistrict, data.Brand, data.Model, data.Unit, data.Params, data.Value, data.Address, data.Long, data.Lat, data.ImgUrl, data.SystemLoginUrl, data.SystemLoginPwd, data.IsDeleted)
	}, assetsIdKey)
	return ret, err
}

func (m *defaultAssetsModel) Update(ctx context.Context, data *Assets) error {
	assetsIdKey := fmt.Sprintf("%s%v", cacheAssetsIdPrefix, data.Id)
	_, err := m.ExecCtx(ctx, func(ctx context.Context, conn sqlx.SqlConn) (result sql.Result, err error) {
		query := fmt.Sprintf("update %s set %s where `id` = ?", m.table, assetsRowsWithPlaceHolder)
		return conn.ExecCtx(ctx, query, data.Serial, data.Name, data.ProjectId, data.SonProjectId, data.PartProjectId, data.Type, data.SubDistrict, data.Brand, data.Model, data.Unit, data.Params, data.Value, data.Address, data.Long, data.Lat, data.ImgUrl, data.SystemLoginUrl, data.SystemLoginPwd, data.IsDeleted, data.Id)
	}, assetsIdKey)
	return err
}

func (m *defaultAssetsModel) formatPrimary(primary interface{}) string {
	return fmt.Sprintf("%s%v", cacheAssetsIdPrefix, primary)
}

func (m *defaultAssetsModel) queryPrimary(ctx context.Context, conn sqlx.SqlConn, v, primary interface{}) error {
	query := fmt.Sprintf("select %s from %s where `id` = ? limit 1", assetsRows, m.table)
	return conn.QueryRowCtx(ctx, v, query, primary)
}

func (m *defaultAssetsModel) tableName() string {
	return m.table
}
